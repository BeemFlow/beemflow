name: test_parallel_integration
description: Integration test for parallel execution with real scenarios

vars:
  test_data: ["apple", "banana", "cherry", "date", "elderberry"]
  base_url: "https://postman-echo.com"

steps:
  # Test parallel HTTP requests
  - id: parallel_http_requests
    parallel: true
    steps:
      - id: get_ip
        use: http
        with:
          url: "{{base_url}}/ip"
          method: GET
      - id: get_headers
        use: http
        with:
          url: "{{base_url}}/headers"
          method: GET
      - id: get_user_agent
        use: http
        with:
          url: "{{base_url}}/headers"
          method: GET

  # Test foreach with parallel processing
  - id: process_data_parallel
    foreach: "{{test_data}}"
    as: "item"
    do:
      - id: "echo_{{item}}"
        use: core.echo
        with:
          text: "Processing {{item}} in parallel"

  # Test foreach with sequential processing for comparison
  - id: process_data_sequential
    foreach: "{{test_data}}"
    as: "item"
    do:
      - id: "echo_seq_{{item}}"
        use: core.echo
        with:
          text: "Processing {{item}} sequentially"

  # Test nested parallel within foreach
  - id: nested_parallel_test
    foreach: "{{test_data}}"
    as: "fruit"
    do:
      - id: "parallel_ops_{{fruit}}"
        parallel: true
        steps:
          - id: "uppercase_{{fruit}}"
            use: core.echo
            with:
              text: "{{fruit | upper}}"
          - id: "length_{{fruit}}"
            use: core.echo
            with:
              text: "{{fruit}} has {{fruit | length}} characters"

  # Final verification step
  - id: verify_results
    use: core.echo
    with:
      text: |
        Parallel test completed!
        HTTP requests: {{len(steps.parallel_http_requests)}}
        Parallel items: {{len(steps.process_data_parallel)}}
        Sequential items: {{len(steps.process_data_sequential)}}
        Nested operations: {{len(steps.nested_parallel_test)}} 