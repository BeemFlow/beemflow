name: test_templating_integration
description: Integration test for templating engine and environment loading

vars:
  user_name: "{{env.USER || 'testuser'}}"
  timestamp: "{{now}}"
  test_object:
    name: "Test Object"
    values: [1, 2, 3, 4, 5]
    nested:
      deep_value: "found it"

steps:
  # Test basic templating
  - id: basic_templating
    use: core.echo
    with:
      text: "Hello {{user_name}}, current time is {{timestamp}}"

  # Test object access and filters
  - id: object_templating
    use: core.echo
    with:
      text: |
        Object name: {{test_object.name}}
        First value: {{test_object.values.0}}
        Values length: {{test_object.values | length}}
        Uppercase name: {{test_object.name | upper}}
        Deep value: {{test_object.nested.deep_value}}

  # Test conditional templating
  - id: conditional_templating
    use: core.echo
    with:
      text: |
        {% if test_object.values | length > 3 %}
        We have many values: {{test_object.values | join:", "}}
        {% else %}
        We have few values
        {% endif %}

  # Test loop templating
  - id: loop_templating
    use: core.echo
    with:
      text: |
        Processing values:
        {% for value in test_object.values %}
        - Value {{loop.index}}: {{value}}
        {% endfor %}

  # Test step output referencing
  - id: step_reference_test
    use: core.echo
    with:
      text: "Previous step said: {{steps.basic_templating.text}}"

  # Test complex expression evaluation
  - id: expression_test
    use: core.echo
    with:
      text: |
        Math: {{test_object.values.0 + test_object.values.1}}
        String ops: {{"hello" | upper | reverse}}
        Boolean: {{test_object.values | length > 0}}

  # Test environment variable access
  - id: env_test
    use: core.echo
    with:
      text: |
        User: {{env.USER || 'unknown'}}
        Home: {{env.HOME || '/tmp'}}
        Path exists: {{env.PATH | length > 0}}

  # Test foreach with templated IDs
  - id: templated_foreach
    foreach: "{{test_object.values}}"
    as: "num"
    do:
      - id: "process_number_{{num}}"
        use: core.echo
        with:
          text: "Processing number {{num}}, squared is {{num * num}}"

  # Test error handling in templates
  - id: error_handling_test
    use: core.echo
    with:
      text: |
        Safe access: {{nonexistent.field || 'default'}}
        Null coalescing: {{null || 'fallback'}}
        Empty string: {{'' || 'not empty'}} 